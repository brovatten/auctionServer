
package com.example.server.dao;
import com.example.server.dao.AuctionTable;
import com.example.server.model.Bid;
import org.apache.coyote.Request;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@RestController // This means that this class is a Controller
@RequestMapping(path="db") // This means URL's start with /demo (after Application path)
public class DBController {
     // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BidRepository bidRepository;
    private AuctionRepository auctionRepository;

    @Autowired
    public DBController(BidRepository bidRepository, AuctionRepository auctionRepository){
        this.bidRepository = bidRepository;
        this.auctionRepository = auctionRepository;
    }

    @PostMapping(path = "/auction")
    public String addNewAuction (@RequestBody AuctionTable auctionTable){
        auctionRepository.save(auctionTable);
        return "Saved";
    }

    @PostMapping(path = "/bid") // Map ONLY POST Requests
    public String addNewBid (@RequestBody BidTable bidTable) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request


        bidRepository.save(bidTable);
        return "Saved";
    }

    @GetMapping(path = "/auction")
    public @ResponseBody Iterable<AuctionTable> getAllAuctions() {
        // This returns a JSON or XML with the users
        return auctionRepository.findAll();
    }

    @GetMapping(path = "/bid")
    public @ResponseBody Iterable<BidTable> getAllBids() {
        // This returns a JSON or XML with the users
        return bidRepository.findAll();
    }
}
